

SELECT * FROM ACCOUNT
SELECT * FROM RESOURCES
SELECT * FROM USEREXP
SELECT * FROM DOLLS_STORAGE
SELECT * FROM DOLLEXP
SELECT * FROM DOLLS_INFORMATION
SELECT DOLL_ID, DOLL_CHOICE1 FROM DOLLS_CHOICE

SELECT USER_ID, USER_LV, USER_EXP, CREATION_DATE FROM Account where user_id = 'mingilab'
update ACCOUNT set USER_EXP = 10, USER_LV = USER_LV +1 where USER_ID = 'mingilab'

-- 인형삭제
DELETE FROM DOLLS_STORAGE WHERE DOLL_SECNO = 17

-- 계정생성
insert into ACCOUNT(USER_ID,USER_PW) values('administrator','1234')

insert into ACCOUNT(USER_ID,USER_PW)
values('boosankim','1234')

-- 필요경험치 출력(향후 배열로 수정)
select USER_ID, USER_NEEDEXP
from ACCOUNT_1 join USEREXP using(USER_LV)

-- 계정생성시 초기 자원생성
insert into RESOURCES(USER_ID) values('mingilab')

-- 자원출력
select USER_ID, MANPOWER, AMMUNITON, FOOD, PARTS, CORE
from ACCOUNT join RESOURCES using(USER_ID)

-- 자원출력2
SELECT * FROM RESOURCES where user_id = 'administrator';

-- 자원생성
update RESOURCES set MANPOWER = MANPOWER + 900,
					 AMMUNITON = AMMUNITON + 900,
					 FOOD = FOOD + 900,
					 PARTS = PARTS + 250
where USER_ID = 'mingilab';

--생성인형 정보출력
select USER_ID, DOLL_ID, DOLL_SECNO, DOLL_NAME, DOLL_GRADE, DOLL_CLASS, DOLL_LV
from DOLLS_STORAGE join DOLLS_INFORMATION using(DOLL_ID)
order by USER_ID, DOLL_ID

--인형정보 출력
select * from DOLLS_INFORMATION where doll_id = 1


-- 시퀀스검색
select sequence_name from user_sequences;

--인형생성
insert into DOLLS_STORAGE(USER_ID, DOLL_ID,DOLL_SECNO)
values('boosankim',5,DOLLSEC.nextval);
update DOLLS_INFORMATION set DOLL_COUNT = DOLL_COUNT + 1 where DOLL_ID = 5;

insert into DOLLS_STORAGE(USER_ID, DOLL_ID,DOLL_SECNO)
values('boosankim',17,DOLLSEC.nextval);
update DOLLS_INFORMATION set DOLL_COUNT = DOLL_COUNT + 1 where DOLL_ID = 17;

insert into DOLLS_STORAGE(USER_ID, DOLL_ID,DOLL_SECNO)
values('boosankim',68,DOLLSEC.nextval);
update DOLLS_INFORMATION set DOLL_COUNT = DOLL_COUNT + 1 where DOLL_ID = 68;

create table ACCOUNT(
	USER_ID varchar2(30) PRIMARY KEY,
	USER_PW varchar2(30) NOT NULL,
	USER_LV NUMBER(3) DEFAULT 1,
	USER_EXP NUMBER(10) DEFAULT 1,
	CREATION_DATE DATE DEFAULT SYSDATE
)

create table RESOURCES(
	USER_ID varchar2(30) PRIMARY KEY,
	MANPOWER NUMBER(10) DEFAULT 1000, check(MANPOWER between 0 and 300000),
	AMMUNITON NUMBER(10) DEFAULT 1000, check(AMMUNITON between 0 and 300000), 
	FOOD NUMBER(10) DEFAULT 1000, check(FOOD between 0 and 300000),
	PARTS NUMBER(10) DEFAULT 1000, check(PARTS between 0 and 300000),
	CORE NUMBER(5) DEFAULT 1, check(CORE between 0 and 10000)
)

create table USEREXP(
	USER_LV NUMBER(3) NOT NULL,check(USER_LV between 0 and 100),
	USER_NEEDEXP NUMBER(10) NOT NULL
)


create SEQUENCE DOLLSEC
	START WITH 1
	INCREMENT BY 1
	NOCYCLE;

create table DOLLS_STORAGE(
	USER_ID varchar2(30) NOT NULL,
	DOLL_SECNO NUMBER PRIMARY KEY,	
	DOLL_ID NUMBER(3) NOT NULL,
	DOLL_LV NUMBER(3) DEFAULT 1
)

create table DOLLEXP(
	DOLL_LV NUMBER(3) NOT NULL,check(DOLL_LV between 0 and 100),
	DOLL_NEEDEXP NUMBER(10) NOT NULL
)

create table DOLLS_INFORMATION(
	DOLL_ID NUMBER(3) PRIMARY KEY,
	DOLL_NAME varchar2(20) NOT NULL,
	DOLL_GRADE NUMBER(1) NOT NULL, check(DOLL_GRADE between 2 and 5),
	DOLL_CLASS varchar2(3) NOT NULL, check(DOLL_CLASS IN('HG','SMG','AR','RF','MG','SG')),
	DOLL_HP NUMBER(4) NOT NULL,
	DOLL_ATK NUMBER(3) NOT NULL,
	DOLL_HIT NUMBER(3) NOT NULL,
	DOLL_AVOID NUMBER(3) NOT NULL,
	DOLL_ATKSPEED NUMBER(3) NOT NULL,
	DOLL_MOV NUMBER(3) NOT NULL,
	DOLL_MAGAZINE NUMBER(2) NOT NULL,
	DOLL_ARMOR NUMBER(3) NOT NULL,
	DOLL_TIME varchar2(5),
	DOLL_COUNT NUMBER DEFAULT 0
)

create table DOLLS_CHOICE(
	DOLL_ID NUMBER(3) NOT NULL,
	DOLL_CHOICE0 NUMBER(3,3),
	DOLL_CHOICE1 NUMBER(3,3),	
	DOLL_CHOICE2 NUMBER(3,3),
	DOLL_CHOICE3 NUMBER(3,3)
)